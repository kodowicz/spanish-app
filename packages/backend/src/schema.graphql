# import * from './generated/prisma.graphql'

input SignUpInput {
  email: String
  name: String
  password: String
}

input LoginInput {
  email: String
  password: String
}

input PasswordInput {
  password: String!
  confirmPassword: String!
}

type Message {
  message: String
}

enum UpdateLearnTermInput {
  INCREMENT
  DECREMENT
  STATIC
}

type User {
  id: ID!
  name: String!
  email: String!
  draftSet: DraftSet
  editSet: EditSet
  sets: [Set!]
  learnSets: [LearnSet!]
}

type Query {
  user: User

  draftSet: DraftSet
  draftTerms(where: DraftTermWhereInput!): [DraftTerm]!

  sets(
    where: SetWhereInput
    orderBy: SetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Set]!
  setsConnection(
    where: SetWhereInput
    orderBy: SetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): SetConnection!
  set(where: SetWhereUniqueInput!): Set
  terms(
    where: TermWhereInput
    orderBy: TermOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Term]!

  editSet: EditSet
  editTerms(where: EditTermWhereInput!): [EditTerm]!

  learnSet(where: LearnSetWhereUniqueInput!): LearnSet
  learnSets(
    where: LearnSetWhereInput
    orderBy: LearnSetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [LearnSet]
  learnSetsConnection(
    where: LearnSetWhereInput
    orderBy: LearnSetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): LearnSetConnection
  learnTerm(where: LearnTermWhereUniqueInput!): LearnTerm
  learnTerms(
    where: LearnTermWhereInput
    orderBy: LearnTermOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [LearnTerm]!
}

type Mutation {
  signup(data: SignUpInput!): User!
  signin(data: LoginInput!): User!
  signout: Message!
  updatePassword(data: PasswordInput!): Message!

  createDraftSet: DraftSet!
  updateDraftSet(
    data: DraftSetUpdateInput!
    where: DraftSetWhereUniqueInput!
  ): DraftSet!
  deleteDraftSet: Message!

  createDraftTerm(where: SetWhereUniqueInput!): DraftTerm!
  updateDraftTerm(
    data: DraftTermUpdateInput!
    where: DraftTermWhereUniqueInput!
  ): DraftTerm!
  deleteDraftTerm(where: DraftTermWhereUniqueInput!): DraftTerm!

  createSet: Set!
  updateSet: Set!
  deleteSet(where: SetWhereUniqueInput!): Message!

  createEditSet(where: SetWhereUniqueInput!): EditSet!
  updateEditSet(
    data: EditSetUpdateInput!
    where: EditSetWhereUniqueInput!
  ): EditSet!
  deleteEditSet: Message!

  createEditTerm(where: EditSetWhereUniqueInput!): EditTerm!
  updateEditTerm(
    data: EditTermUpdateInput!
    where: EditTermWhereUniqueInput!
  ): EditTerm!
  deleteEditTerm(where: EditTermWhereUniqueInput!): EditTerm!

  createLearnSet(where: SetWhereUniqueInput!): LearnSet!
  deleteLearnSet(where: LearnSetWhereUniqueInput!): LearnSet!
  updateLearnTerm(
    data: UpdateLearnTermInput!
    where: LearnTermWhereUniqueInput!
  ): LearnTerm
}
